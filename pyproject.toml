[build-system]
requires = ["setuptools>=64.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "verifact"
version = "0.1.0"
description = "AI-powered factchecking system"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "VeriFact Team", email = "info@verifact.ai" }
]
requires-python = ">=3.10"
dependencies = [
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "langchain>=0.0.300",
    "langchain-core>=0.0.10",
    "langchain-openai>=0.0.1",
    "fastapi>=0.100.0,<0.101.0",
    "uvicorn>=0.23.0",
    "python-dotenv>=1.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.28.0",
    "aiosqlite>=0.19.0",
    "httpx>=0.23.0,<=0.28.1",
    "redis>=5.0.0",
    "tenacity>=8.2.0",
    "pydub>=0.25.0",
    "nltk>=3.8.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "beautifulsoup4>=4.12.0",
    "pytest-asyncio>=0.21.0",
    "psutil",
    "chainlit",
    "openai-agents>=0.0.15",
    "serpapi>=0.1.5",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.3.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "tox>=4.11.0",
    "ipykernel>=6.29.5",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/verifact"
"Bug Tracker" = "https://github.com/yourusername/verifact/issues"

[project.scripts]
verifact = "verifact.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"

[tool.ruff]
target-version = "py310"
line-length = 100
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.ipynb",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff.lint]
select = [
    "E", "W", "F", "I", "N", "UP", "B", "A", "C4", "DTZ", "T10", "EM", "EXE", 
    "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", 
    "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", 
    "PGH", "PL", "TRY", "FLY", "PERF", "FURB", "LOG", "RUF"
]

ignore = [
    "E501", "B008", "C901", "PLR0913", "PLR0912", "PLR0915", "PLR0911", "ARG001", "INP001", "SLF001"
]

fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true

[tool.coverage.run]
source = ["src"]
omit = ["src/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
